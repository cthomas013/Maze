package falstad;

import generation.CardinalDirection;
import generation.Cells;

public class BasicRobot implements Robot {
	
	protected int[] currentPosition;
	protected CardinalDirection direction;
	protected MazeController maze;
	protected Cells cells;
	protected float batteryLevel;
	protected boolean hasStopped;
	
	public BasicRobot() {
		this.currentPosition[0] = 0;
		this.currentPosition[1] = 0;
		this.direction = direction.getDirection(0, 0);
		this.maze = null;
		this.batteryLevel = 2500;
		this.hasStopped = false;
	}

	@Override
	public void rotate(Turn turn) {
		// check to make sure there is enough battery to turn left or right
		if (turn == Turn.LEFT || turn == Turn.RIGHT) {
			if (this.batteryLevel >= 3) {
				
			}
		}
		else {
			if (this.batteryLevel >= 6) {
				
			}
		}
	}

	@Override
	public void move(int distance, boolean manual) {
		// check to make sure you have enough battery to move 
		if (this.batteryLevel >= 5) {
			if (manual == true) {
				distance = 1;
			}
			else {
				
			}
		}
	}

	@Override
	public int[] getCurrentPosition() throws Exception {
		return this.currentPosition;
	}

	@Override
	public void setMaze(MazeController maze) {
		this.maze = maze;
		this.cells = this.maze.mazeConfig.getMazecells();
	}

	@Override
	public boolean isAtGoal() {
		return cells.isExitPosition(this.currentPosition[0], this.currentPosition[1]);
	}

	@Override
	public boolean canSeeGoal(Direction direction) throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isInsideRoom() throws UnsupportedOperationException {
		return cells.isInRoom(this.currentPosition[0], this.currentPosition[1]);
	}

	@Override
	public boolean hasRoomSensor() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public CardinalDirection getCurrentDirection() {
		return this.direction;
	}

	@Override
	public float getBatteryLevel() {
		return this.batteryLevel;
	}

	@Override
	public void setBatteryLevel(float level) {
		this.batteryLevel = level;
	}

	@Override
	public float getEnergyForFullRotation() {
		return 12;
	}

	@Override
	public float getEnergyForStepForward() {
		return  5;
	}

	@Override
	public boolean hasStopped() {
		return this.hasStopped;
	}

	@Override
	public int distanceToObstacle(Direction direction) throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean hasDistanceSensor(Direction direction) {
		// TODO Auto-generated method stub
		return false;
	}

}
